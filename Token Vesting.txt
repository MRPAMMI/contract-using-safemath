pragma solidity ^0.8.0;

0.8.0;

import "@openzeppelin/contracts/utils/math/SafeMath.sol";
import "./IERC20.sol";

contract TokenVesting {
    using SafeMath for uint256;

    address public beneficiary;
    uint256 public vestingStart;
    uint256 public vestingDuration;
    uint256 public vestingCliff;
    IERC20 public token;

    constructor(address _beneficiary, uint256 _vestingStart, uint256 _vestingDuration, uint256 _vestingCliff, address _token) {
        require(_beneficiary != address(0), "Beneficiary address cannot be zero");
        require(_vestingStart >= block.timestamp, "Vesting start time must be in the future");
        require(_vestingDuration > 0, "Vesting duration must be greater than zero");
        require(_vestingCliff >= _vestingStart, "Vesting cliff time must be after vesting start time");

        beneficiary = _beneficiary;
        vestingStart = _vestingStart;
        vestingDuration = _vestingDuration;
        vestingCliff = _vestingCliff;
        token = IERC20(_token);
    }

    function release() public {
        uint256 vestedTokens = calculateVestedTokens();
        require(vestedTokens > 0, "No tokens have vested yet");
        token.transfer(beneficiary, vestedTokens);
    }

    function calculateVestedTokens() public view returns (uint256) {
        uint256 currentBalance = token.balanceOf(address(this));
        uint256 totalBalance = currentBalance.add(token.balanceOf(beneficiary));
        if (block.timestamp < vestingCliff) {
            return 0;
        } else if (block.timestamp >= vestingStart.add(vestingDuration)) {
            return totalBalance;
        } else {
            uint256 vestedDuration = block.timestamp.sub(vestingStart);
            uint256 vestedTokens = totalBalance.mul(vestedDuration).div(vestingDuration);
            return vestedTokens;
        }
    }

    function revoke() public {
        require(msg.sender == beneficiary, "Only the beneficiary can revoke the vesting");
        uint256 remainingTokens = token.balanceOf(address(this));
        token.transfer(beneficiary, remainingTokens);
    }
}
